<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">

    <!--扫描控制器,当配置了它后,Spring会自动的到com.mjl.controller
      下扫描带有@controller @service @component等注解等类,将他们自动实例化-->
    <context:component-scan base-package="com.mjl.controller">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service"/>
    </context:component-scan>




    <!--<mvc:annotation-driven /> 会自动注册DefaultAnnotationHandlerMapping与
    AnnotationMethodHandlerAdapter 两个bean,它解决了一些@controllerz注解使用时的提前配置-->
    <mvc:annotation-driven />

    <!--配置 页面控制器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/view/"/>
        <property name="suffix" value=".jsp" />
    </bean>




    <!--<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">-->
               <!--<property name="maxUploadSize" value="1024000"/>-->

    <!--</bean>-->


    <!--配置拦截器, 多个拦截器,顺序执行 -->
    <!--<mvc:interceptors>-->
        <!--<mvc:interceptor>-->
            <!--&lt;!&ndash; 匹配的是url路径， 如果不配置或/**,将拦截所有的Controller &ndash;&gt;-->
            <!--<mvc:mapping path="/Status/*" />-->
            <!--<mvc:mapping path="/view/*/*.jsp"/>-->

            <!--<bean class="com.mjl.interceptor.loginInterceptor">-->


            <!--</bean>-->

        <!--</mvc:interceptor>-->
        <!--&lt;!&ndash; 当设置多个拦截器时，先按顺序调用preHandle方法，然后逆序调用每个拦截器的postHandle和afterCompletion方法 &ndash;&gt;-->
    <!--</mvc:interceptors>-->
</beans>